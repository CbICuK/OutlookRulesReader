import XCTest
import MAPI
@testable import OutlookRulesReader

final class ImportActionTests: XCTestCase {
    func testMoveToFolderAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x2C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2,
                0x0C, 0x8B, 0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x01, 0x00, 0xC3, 0xB6, 0x8E, 0x10, 0xF7, 0x75, 0x11,
                0xCE, 0xB4, 0xCD, 0x00, 0xAA, 0x00, 0xBB, 0xB6, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00,
                0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xA1, 0xBB, 0x10, 0x05, 0xE5, 0x10,
                0x1A, 0xA1, 0xBB, 0x08, 0x00, 0x2B, 0x2A, 0x56, 0xC2, 0x00, 0x00, 0x70, 0x73, 0x74, 0x70, 0x72,
                0x78, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x2F, 0xEB,
                0x75, 0x96, 0x50, 0x44, 0x86, 0x83, 0xB8, 0x7D, 0xE5, 0x22, 0xAA, 0x49, 0x48, 0x00, 0x00, 0x43,
                0x00, 0x3A, 0x00, 0x5C, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x5C,
                0x00, 0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x41,
                0x00, 0x70, 0x00, 0x70, 0x00, 0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x5C, 0x00, 0x4C,
                0x00, 0x6F, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x4F,
                0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x5C, 0x00, 0x68,
                0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x72, 0x00, 0x73, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C,
                0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74,
                0x00, 0x00, 0x00, 0x05, 0x49, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.moveToFolderAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is MoveToFolderRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! MoveToFolderRuleElementData
            XCTAssertEqual("Inbox", action.folderName)
        }
    }

    func testAssignToCategoryAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x33, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.assignToCategoryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is CategoriesListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! CategoriesListRuleElementData
            XCTAssertEqual(["Blue Category"], action.categories)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x33, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x3B, 0x00, 0x47, 0x00, 0x72, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
                0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.assignToCategoryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is CategoriesListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! CategoriesListRuleElementData
            XCTAssertEqual(["Blue Category", "Green Category"], action.categories)
        }
    }

    func testDeleteAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x2D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.deleteAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testPermanentlyDeleteAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x42, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(2, file.rules[0].actions.count)
            XCTAssertEqual(.permanentlyDeleteAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            XCTAssertEqual(.stopProcessingMoreRulesAction, file.rules[0].actions[1].identifier)
            XCTAssertTrue(file.rules[0].actions[1].data is SimpleRuleElementData)
        }
    }
    
    func testMoveCopyToFolderAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x39, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2,
                0x0C, 0x8B, 0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x01, 0x00, 0xC3, 0xB6, 0x8E, 0x10, 0xF7, 0x75, 0x11,
                0xCE, 0xB4, 0xCD, 0x00, 0xAA, 0x00, 0xBB, 0xB6, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00,
                0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xA1, 0xBB, 0x10, 0x05, 0xE5, 0x10,
                0x1A, 0xA1, 0xBB, 0x08, 0x00, 0x2B, 0x2A, 0x56, 0xC2, 0x00, 0x00, 0x70, 0x73, 0x74, 0x70, 0x72,
                0x78, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x2F, 0xEB,
                0x75, 0x96, 0x50, 0x44, 0x86, 0x83, 0xB8, 0x7D, 0xE5, 0x22, 0xAA, 0x49, 0x48, 0x00, 0x00, 0x43,
                0x00, 0x3A, 0x00, 0x5C, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x5C,
                0x00, 0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x41,
                0x00, 0x70, 0x00, 0x70, 0x00, 0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x5C, 0x00, 0x4C,
                0x00, 0x6F, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x4F,
                0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x5C, 0x00, 0x68,
                0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x72, 0x00, 0x73, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C,
                0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74,
                0x00, 0x00, 0x00, 0x05, 0x49, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.moveCopyToFolderAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is MoveToFolderRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! MoveToFolderRuleElementData
            XCTAssertEqual("Inbox", action.folderName)
        }
    }
    
    func testFlagAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x31, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D,
                0x01, 0x00, 0x00, 0x06, 0x41, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00,
                0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00,
                0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00,
                0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00,
                0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagRuleElementData
            XCTAssertEqual("Action", action.actionName)
            XCTAssertEqual(365, action.days)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x31, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x06, 0x41, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00,
                0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00,
                0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00,
                0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00,
                0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagRuleElementData
            XCTAssertEqual("Action", action.actionName)
            XCTAssertEqual(0, action.days)
        }
    }
    
    func testForwardAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x2E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.forwardAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(1, action.values.count)
            XCTAssertEqual(6, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x2E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.forwardAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(2, action.values.count)
            XCTAssertEqual(11, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(action.values[0][PropertyId.tagSearchKey.rawValue] is [Data])
            XCTAssertTrue(action.values[0][PropertyId.tagEntryId.rawValue] is [Data])
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, action.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }
    
    func testForwardAsAttachmentAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x47, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.forwardAsAttachmentAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(1, action.values.count)
            XCTAssertEqual(6, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x47, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.forwardAsAttachmentAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(2, action.values.count)
            XCTAssertEqual(11, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(action.values[0][PropertyId.tagSearchKey.rawValue] is [Data])
            XCTAssertTrue(action.values[0][PropertyId.tagEntryId.rawValue] is [Data])
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, action.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }

    func testReplyUsingTemplateAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x2F, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x5C, 0x00, 0x6D, 0x00, 0x61, 0x00,
                0x69, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.replyUsingTemplateAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PathRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PathRuleElementData
            XCTAssertEqual("C:\\Program Files\\Microsoft Office\\root\\Templates\\1033\\mail.oft", action.path)
        }
    }

    func testFlagForFollowUpAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x09, 0x46, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00,
                0x20, 0x00, 0x75, 0x00, 0x70, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00,
                0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00,
                0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00,
                0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00,
                0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00,
                0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00,
                0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("Follow up", action.actionName)
            XCTAssertEqual(.today, action.followUp)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x09, 0x46, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00,
                0x20, 0x00, 0x75, 0x00, 0x70, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00,
                0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00,
                0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00,
                0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00,
                0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00,
                0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00,
                0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("Follow up", action.actionName)
            XCTAssertEqual(.tomorrow, action.followUp)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x14, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x59, 0x00, 0x6F, 0x00,
                0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00,
                0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("For Your Information", action.actionName)
            XCTAssertEqual(.thisWeek, action.followUp)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x14, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x59, 0x00, 0x6F, 0x00,
                0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00,
                0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("For Your Information", action.actionName)
            XCTAssertEqual(.nextWeek, action.followUp)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x00, 0x14, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x59, 0x00, 0x6F, 0x00,
                0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00,
                0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("For Your Information", action.actionName)
            XCTAssertEqual(.noDate, action.followUp)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x00, 0x00, 0x14, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x59, 0x00, 0x6F, 0x00,
                0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00,
                0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00,
                0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00,
                0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.flagForFollowUpAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is FlagForFollowUpRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! FlagForFollowUpRuleElementData
            XCTAssertEqual("For Your Information", action.actionName)
            XCTAssertEqual(.completed, action.followUp)
        }
    }

    func testClearFlagAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x16, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74,
                0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61,
                0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 0x43,
                0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x32,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C,
                0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20,
                0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69,
                0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20,
                0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70,
                0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30,
                0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.clearFlagAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testClearCategoriesAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x16, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74,
                0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61,
                0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 0x43,
                0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x52,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C,
                0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20,
                0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69,
                0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20,
                0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70,
                0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30,
                0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.clearCategoriesAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testMarkImportanceAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x37, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markImportanceAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is ImportanceRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(.low, action.importance)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x37, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markImportanceAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is ImportanceRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(.normal, action.importance)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x37, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markImportanceAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is ImportanceRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(.high, action.importance)
        }
    }

    func testPrintAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43,
                0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61,
                0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C,
                0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66,
                0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65,
                0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65,
                0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C,
                0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.printAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    func testStartApplicationAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x49, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00,
                0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x5C, 0x00, 0x49, 0x00, 0x44, 0x00, 0x41, 0x00, 0x20, 0x00, 0x37, 0x00, 0x2E, 0x00, 0x32, 0x00,
                0x5C, 0x00, 0x69, 0x00, 0x64, 0x00, 0x61, 0x00, 0x2E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.startApplicationAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PathRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PathRuleElementData
            XCTAssertEqual("C:\\Program Files\\IDA 7.2\\ida.exe", action.path)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
                0x52, 0xF2, 0x1A, 0x46, 0x72, 0x96, 0x4A, 0x86, 0x22, 0x6C, 0x55, 0xB0, 0x0E, 0xD7, 0x9D, 0x01,
                0x80, 0x49, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x43, 0x00,
                0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00,
                0x49, 0x00, 0x44, 0x00, 0x41, 0x00, 0x20, 0x00, 0x37, 0x00, 0x2E, 0x00, 0x32, 0x00, 0x5C, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x61, 0x00, 0x2E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.onThisComputerOnlyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].data is OnThisComputerOnlyRuleElementData)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.startApplicationAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PathRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PathRuleElementData
            XCTAssertEqual("C:\\Program Files\\IDA 7.2\\ida.exe", action.path)
        }
    }

    func testPlaySoundAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69,
                0xC0, 0x06, 0x38, 0x4C, 0x63, 0x62, 0x47, 0xAE, 0xD8, 0xC2, 0x3C, 0xAE, 0xA4, 0xC6, 0x26, 0x01,
                0x80, 0x36, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x43, 0x00,
                0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00,
                0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x61, 0x00, 0x5C, 0x00,
                0x63, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x77, 0x00,
                0x61, 0x00, 0x76, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00,
                0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00,
                0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00,
                0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00,
                0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.onThisComputerOnlyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].data is OnThisComputerOnlyRuleElementData)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.playSoundAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PathRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PathRuleElementData
            XCTAssertEqual("C:\\Windows\\Media\\chimes.wav", action.path)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x36, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B,
                0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00,
                0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x61, 0x00,
                0x5C, 0x00, 0x63, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x2E, 0x00,
                0x77, 0x00, 0x61, 0x00, 0x76, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00,
                0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00,
                0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00,
                0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00,
                0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00,
                0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00,
                0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.playSoundAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PathRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PathRuleElementData
            XCTAssertEqual("C:\\Windows\\Media\\chimes.wav", action.path)
        }
    }

    func testMarkAsReadAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x4C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markAsReadAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    func testRunScriptAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x80, 0x4F, 0x12, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4F,
                0x12, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x4B, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
                0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6A, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x31, 0x00,
                0x2E, 0x00, 0x43, 0x00, 0x75, 0x00, 0x73, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x4D, 0x00,
                0x61, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00,
                0x67, 0x00, 0x65, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x1E, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x6A, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x43,
                0x00, 0x75, 0x00, 0x73, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65,
                0x00, 0x52, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.runScriptAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is RunScriptElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! RunScriptElementData
            XCTAssertEqual("Project1.CustomMailMessageRule", condition.name)
            XCTAssertEqual("Project1.CustomMailMessageRule", condition.function)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x80, 0x4F, 0x12, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4F,
                0x12, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
                0x52, 0xF2, 0x1A, 0x46, 0x72, 0x96, 0x4A, 0x86, 0x22, 0x6C, 0x55, 0xB0, 0x0E, 0xD7, 0x9D, 0x01,
                0x80, 0x4B, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x50, 0x00,
                0x72, 0x00, 0x6F, 0x00, 0x6A, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x31, 0x00, 0x2E, 0x00,
                0x43, 0x00, 0x75, 0x00, 0x73, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x4D, 0x00, 0x61, 0x00,
                0x69, 0x00, 0x6C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00,
                0x65, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x1E, 0x50, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x6A, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x43, 0x00, 0x75,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C,
                0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x52,
                0x00, 0x75, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.onThisComputerOnlyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].data is OnThisComputerOnlyRuleElementData)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.runScriptAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is RunScriptElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! RunScriptElementData
            XCTAssertEqual("Project1.CustomMailMessageRule", condition.name)
            XCTAssertEqual("Project1.CustomMailMessageRule", condition.function)
        }
    }

    func testStopProcessingMoreRulesAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x42, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.stopProcessingMoreRulesAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testMarkSensitivityAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markSensitivityAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SensitivityRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.normal, condition.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markSensitivityAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SensitivityRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.personal, condition.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markSensitivityAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SensitivityRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.`private`, condition.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markSensitivityAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SensitivityRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.confidential, condition.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.markSensitivityAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SensitivityRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
            
            let condition = file.rules[0].actions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(0x04, condition.rawSensitivity)
        }
    }
    
    func testNotifyReadAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.notifyReadAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    func testNotifyDeliveredAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.notifyDeliveredAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    func testCcAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C,
                0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66,
                0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74,
                0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74,
                0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.ccAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(1, action.values.count)
            XCTAssertEqual(6, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x32, 0x00, 0x36, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xF0, 0x2E, 0x0B, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x35, 0x00,
                0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00,
                0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00,
                0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00,
                0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00,
                0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.ccAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is PeopleOrPublicGroupListRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(2, action.values.count)
            XCTAssertEqual(11, action.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", action.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(action.values[0][PropertyId.tagSearchKey.rawValue] is [Data])
            XCTAssertTrue(action.values[0][PropertyId.tagEntryId.rawValue] is [Data])
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, action.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", action.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, action.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, action.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }
    
    func testDeferDeliveryAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.deferDeliveryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DeferDeliveryRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DeferDeliveryRuleElementData
            XCTAssertEqual(0, action.minutes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.deferDeliveryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DeferDeliveryRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DeferDeliveryRuleElementData
            XCTAssertEqual(1, action.minutes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.deferDeliveryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DeferDeliveryRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DeferDeliveryRuleElementData
            XCTAssertEqual(120, action.minutes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x3E, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79,
                0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69,
                0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72,
                0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66,
                0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F,
                0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61,
                0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.deferDeliveryAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DeferDeliveryRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DeferDeliveryRuleElementData
            XCTAssertEqual(121, action.minutes)
        }
    }

    func testDisplayMessageInNewItemAlertWindowAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x17, 0x64, 0x00, 0x69, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79,
                0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74,
                0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C,
                0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x41, 0x00,
                0x4C, 0x00, 0x45, 0x00, 0x52, 0x00, 0x54, 0x00, 0x21, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00,
                0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00,
                0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00,
                0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00,
                0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00,
                0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.displayMessageInNewItemAlertWindowAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DisplayMessageInNewItemAlertWindowRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DisplayMessageInNewItemAlertWindowRuleElementData
            XCTAssertEqual("ALERT!", action.message)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x17, 0x64, 0x00, 0x69, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79,
                0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74,
                0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C,
                0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x35, 0x00,
                0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00,
                0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00,
                0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00,
                0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00,
                0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.displayMessageInNewItemAlertWindowAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DisplayMessageInNewItemAlertWindowRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DisplayMessageInNewItemAlertWindowRuleElementData
            XCTAssertEqual("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", action.message)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x17, 0x64, 0x00, 0x69, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79,
                0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74,
                0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C,
                0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x01,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
                0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x62, 0x00,
                0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00,
                0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00,
                0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00,
                0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00,
                0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.displayMessageInNewItemAlertWindowAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is DisplayMessageInNewItemAlertWindowRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let action = file.rules[0].actions[0].data as! DisplayMessageInNewItemAlertWindowRuleElementData
            XCTAssertEqual("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", action.message)
        }
    }

    func testDisplayDesktopAlertAction() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x4F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.displayDesktopAlertAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    func testMultipleActions() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x4C, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F,
                0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C,
                0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33,
                0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(2, file.rules[0].actions.count)
            XCTAssertEqual(.printAction, file.rules[0].actions[0].identifier)
            XCTAssertTrue(file.rules[0].actions[0].data is SimpleRuleElementData)
            XCTAssertEqual(.markAsReadAction, file.rules[0].actions[1].identifier)
            XCTAssertTrue(file.rules[0].actions[1].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }
    
    static var allTests = [
        ("testMoveToFolderAction", testMoveToFolderAction),
        ("testAssignToCategoryAction", testAssignToCategoryAction),
        ("testDeleteAction", testDeleteAction),
        ("testPermanentlyDeleteAction", testPermanentlyDeleteAction),
        ("testMoveCopyToFolderAction", testMoveCopyToFolderAction),
        ("testFlagAction", testFlagAction),
        ("testForwardAction", testForwardAction),
        ("testForwardAsAttachmentAction", testForwardAsAttachmentAction),
        ("testReplyUsingTemplateAction", testReplyUsingTemplateAction),
        ("testFlagForFollowUpAction", testFlagForFollowUpAction),
        ("testClearFlagAction", testClearFlagAction),
        ("testClearCategoriesAction", testClearCategoriesAction),
        ("testMarkImportanceAction", testMarkImportanceAction),
        ("testPrintAction", testPrintAction),
        ("testStartApplicationAction", testStartApplicationAction),
        ("testPlaySoundAction", testPlaySoundAction),
        ("testMarkAsReadAction", testMarkAsReadAction),
        ("testRunScriptAction", testRunScriptAction),
        ("testStopProcessingMoreRulesAction", testStopProcessingMoreRulesAction),
        ("testMarkSensitivityAction", testMarkSensitivityAction),
        ("testNotifyReadAction", testNotifyReadAction),
        ("testNotifyDeliveredAction", testNotifyDeliveredAction),
        ("testCcAction", testCcAction),
        ("testDeferDeliveryAction", testDeferDeliveryAction),
        ("testDisplayMessageInNewItemAlertWindowAction", testDisplayMessageInNewItemAlertWindowAction),
        ("testDisplayDesktopAlertAction", testDisplayDesktopAlertAction),
        ("testMultipleActions", testMultipleActions),
    ]
}
