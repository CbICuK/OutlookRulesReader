import XCTest
import MAPI
@testable import OutlookRulesReader

final class ImportExceptionTests: XCTestCase {
    func testFromException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C,
                0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66,
                0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74,
                0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74,
                0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x33, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.fromException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is PeopleOrPublicGroupListRuleElementData)

            let exception = file.rules[0].exceptions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(1, exception.values.count)
            XCTAssertEqual(6, exception.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", exception.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.fromException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is PeopleOrPublicGroupListRuleElementData)

            let exception = file.rules[0].exceptions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(2, exception.values.count)
            XCTAssertEqual(11, exception.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", exception.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(exception.values[0][PropertyId.tagSearchKey.rawValue] is [UInt8])
            XCTAssertTrue(exception.values[0][PropertyId.tagEntryId.rawValue] is [UInt8])
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, exception.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", exception.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }

    func testSpecificWordsInSubjectException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSubjectException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)

            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSubjectException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testThroughAccountException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x14, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
                0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x72, 0x00, 0x73, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00,
                0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x0A, 0x2D, 0x31, 0x39, 0x30, 0x36,
                0x39, 0x32, 0x30, 0x36, 0x38, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F,
                0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C,
                0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33,
                0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.throughSpecifiedAccountException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ThroughAccountRuleElementData)

            let exception = file.rules[0].exceptions[0].data as! ThroughAccountRuleElementData
            XCTAssertEqual("hughbellars@gmail.com", exception.accountName)
            XCTAssertEqual("-190692068", exception.unknown3)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x14, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
                0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x72, 0x00, 0x73, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00,
                0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x0A, 0x2D, 0x31, 0x39, 0x30, 0x36,
                0x39, 0x32, 0x30, 0x36, 0x38, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x69, 0xC0, 0x06, 0x38, 0x4C, 0x63, 0x62, 0x47, 0xAE, 0xD8, 0xC2, 0x3C, 0xAE,
                0xA4, 0xC6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.onThisComputerOnlyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].data is OnThisComputerOnlyRuleElementData)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.throughSpecifiedAccountException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ThroughAccountRuleElementData)

            let exception = file.rules[0].exceptions[0].data as! ThroughAccountRuleElementData
            XCTAssertEqual("hughbellars@gmail.com", exception.accountName)
            XCTAssertEqual("-190692068", exception.unknown3)
        }
    }

    func testSentOnlyToMeException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sentOnlyToMeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testNameInToBoxException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.nameInToBoxException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testImportanceException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.importanceException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ImportanceRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(MessageImportance.low, exception.importance)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.importanceException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ImportanceRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(MessageImportance.normal, exception.importance)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.importanceException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ImportanceRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(MessageImportance.high, exception.importance)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.importanceException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is ImportanceRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! ImportanceRuleElementData
            XCTAssertEqual(0x03, exception.rawImportance)
        }
    }

    func testsensitivityCondition() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sensitivityConditionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SensitivityRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.normal, exception.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sensitivityConditionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SensitivityRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.personal, exception.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sensitivityConditionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SensitivityRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.`private`, exception.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sensitivityConditionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SensitivityRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(MessageSensitivity.confidential, exception.sensitivity)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sensitivityConditionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SensitivityRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SensitivityRuleElementData
            XCTAssertEqual(0x04, exception.rawSensitivity)
        }
    }

    func testFlaggedForActionException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFC, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x09, 0x46, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00,
                0x20, 0x00, 0x75, 0x00, 0x70, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.flaggedForActionException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is FlaggedForActionRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! FlaggedForActionRuleElementData
            XCTAssertEqual("Follow up", exception.action)
        }
    }
    
    func testNameInCcBoxException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.nameInCcBoxException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testNameInToOrCcBoxException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.nameInToOrCcBoxException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testNameNotInToBoxException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(.nameNotInToBoxException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
        }
    }

    func testToException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.toException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is PeopleOrPublicGroupListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(1, exception.values.count)
            XCTAssertEqual(6, exception.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", exception.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.toException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is PeopleOrPublicGroupListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! PeopleOrPublicGroupListRuleElementData
            XCTAssertEqual(2, exception.values.count)
            XCTAssertEqual(11, exception.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", exception.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(exception.values[0][PropertyId.tagSearchKey.rawValue] is [UInt8])
            XCTAssertTrue(exception.values[0][PropertyId.tagEntryId.rawValue] is [UInt8])
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, exception.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", exception.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, exception.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, exception.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }

    func testSpecificWordsInBodyException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFA, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInBodyException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFA, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInBodyException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testSpecificWordsInSubjectOrBodyException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSubjectOrBodyException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xFB, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSubjectOrBodyException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testSpecificWordsInMessageHeaderException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x13, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInMessageHeaderException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x13, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInMessageHeaderException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testSpecificWordsInSendersAddressException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x12, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSendersAddressException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x12, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInSendersAddressException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testSpecificWordsInRecipientsAddressException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x11, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInRecipientsAddressException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x11, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.specificWordsInRecipientsAddressException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["phrase", "other"], exception.entries)
        }
    }

    func testAssignedToCategoryException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.assignedToCategoryException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is CategoriesListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! CategoriesListRuleElementData
            XCTAssertEqual(["Blue Category"], exception.categories)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x3B, 0x00, 0x4F, 0x00, 0x74, 0x00,
                0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.assignedToCategoryException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is CategoriesListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! CategoriesListRuleElementData
            XCTAssertEqual(["Blue Category", "Other"], exception.categories)
        }
    }

    func testAssignedToAnyCategoryException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x1A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.assignedToAnyCategoryException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testWhichIsAnAutomaticReplyException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.automaticReplyException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testHasAttachmentException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.hasAttachmentException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testSizeInSpecificRangeException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sizeInSpecificRangeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SizeInSpecificRangeRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SizeInSpecificRangeRuleElementData
            XCTAssertEqual(0, exception.minSizeInKilobytes)
            XCTAssertEqual(0, exception.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sizeInSpecificRangeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SizeInSpecificRangeRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SizeInSpecificRangeRuleElementData
            XCTAssertEqual(1, exception.minSizeInKilobytes)
            XCTAssertEqual(0, exception.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sizeInSpecificRangeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SizeInSpecificRangeRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SizeInSpecificRangeRuleElementData
            XCTAssertEqual(0, exception.minSizeInKilobytes)
            XCTAssertEqual(1, exception.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sizeInSpecificRangeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SizeInSpecificRangeRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SizeInSpecificRangeRuleElementData
            XCTAssertEqual(1, exception.minSizeInKilobytes)
            XCTAssertEqual(1, exception.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x3F, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.sizeInSpecificRangeException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SizeInSpecificRangeRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SizeInSpecificRangeRuleElementData
            XCTAssertEqual(1, exception.minSizeInKilobytes)
            XCTAssertEqual(999999, exception.maxSizeInKilobytes)
        }
    }

    func testReceivedInSpecificDateSpanException() throws {
        let timeZone = TimeZone(identifier: "GMT")!
        var calendar = Calendar(identifier: .gregorian)
        calendar.timeZone = timeZone
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0D, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0x7F, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is RecievedInSpecificDateSpanRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! RecievedInSpecificDateSpanRuleElementData
            XCTAssertTrue(exception.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 08, hour: 23, minute: 59, second: 0)), exception.afterDate)
            XCTAssertFalse(exception.includeBeforeDate)
                XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 09)), exception.beforeDate)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0D, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0x9F, 0x82, 0xE5, 0x40, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x81, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is RecievedInSpecificDateSpanRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! RecievedInSpecificDateSpanRuleElementData
            XCTAssertFalse(exception.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 09, hour: 23, minute: 59, second: 0)), exception.afterDate)
            XCTAssertTrue(exception.includeBeforeDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 02)), exception.beforeDate)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0D, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0xBF, 0x81, 0xE5, 0x40, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is RecievedInSpecificDateSpanRuleElementData)
            
            let calendar = Calendar(identifier: .gregorian)
            let exception = file.rules[0].exceptions[0].data as! RecievedInSpecificDateSpanRuleElementData
            XCTAssertTrue(exception.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 02, hour: 23, minute: 59, second: 0)), exception.afterDate)
            XCTAssertTrue(exception.includeBeforeDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 05)), exception.beforeDate)
        }
    }

    func testUsesFormException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x1D, 0x49,
                0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65, 0x65, 0x74,
                0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.usesFormException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is UsesFormRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! UsesFormRuleElementData
            XCTAssertEqual(1, exception.numberOfForms)
            XCTAssertEqual("Accept Meeting Response", exception.forms[0].name)
            XCTAssertEqual("IPM.Schedule.Meeting.Resp.Pos", exception.forms[0].className)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x10, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x1D, 0x49,
                0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65, 0x65, 0x74,
                0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x0C, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73,
                0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x13, 0x49, 0x50, 0x4D, 0x2E, 0x4E, 0x6F,
                0x74, 0x65, 0x2E, 0x4D, 0x6F, 0x62, 0x69, 0x6C, 0x65, 0x2E, 0x53, 0x4D, 0x53, 0x00, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.usesFormException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is UsesFormRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! UsesFormRuleElementData
            XCTAssertEqual(2, exception.numberOfForms)
            XCTAssertEqual("Accept Meeting Response", exception.forms[0].name)
            XCTAssertEqual("IPM.Schedule.Meeting.Resp.Pos", exception.forms[0].className)
            XCTAssertEqual("Text Message", exception.forms[1].name)
            XCTAssertEqual("IPM.Note.Mobile.SMS", exception.forms[1].className)
        }
    }

    func testWithSelectedPropertiesOfDocumentOrFormsException() throws {
        // String, contains
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x01, 0x00,
                0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F, 0x00, 0x22,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4,
                0x1B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual(["Accept Meeting Response"], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Author", exception.documentProperties[0].field)
            XCTAssertEqual(0x8222, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.string, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // String, isEqual
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F,
                0x00, 0x22, 0x82, 0x01, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00,
                0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x38,
                0x8E, 0xE3, 0x2A, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Author", exception.documentProperties[0].field)
            XCTAssertEqual(0x8222, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.string, exception.documentProperties[0].dataType)
            XCTAssertEqual(.isExactly, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // String, doesNotContain
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F,
                0x00, 0x22, 0x82, 0x02, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00,
                0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6C,
                0xC1, 0x16, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Author", exception.documentProperties[0].field)
            XCTAssertEqual(0x8222, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.string, exception.documentProperties[0].dataType)
            XCTAssertEqual(.doesNotContain, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, equals (positive)
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4, 0x2A, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, equals (negative)
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x06, 0x5B, 0xB0, 0x05, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(-1, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, not equal to
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x2E, 0xD8, 0x82, 0x2D, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.notEqualTo, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, is at most
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.isAtMost, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, is at least
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.isAtLeast, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, is more than
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x50, 0xFA, 0xA4, 0x4F, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.isMoreThan, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        // Number, is less than
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x50, 0xFA, 0xA4, 0x4F, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.isLessThan, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual([], exception.classes)
        }
        let timeZone = TimeZone(identifier: "GMT")!
        var calendar = Calendar(identifier: .gregorian)
        calendar.timeZone = timeZone
        // Date, before
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0D, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F,
                0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x40, 0x00, 0x28,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xC7, 0x71, 0x1C, 0xC7, 0x0B, 0x67, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Creation Time", exception.documentProperties[0].field)
            XCTAssertEqual(0x8228, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.time, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 01, day: 02, hour: 08, minute: 50, second: 0)), exception.documentProperties[0].dateValue)
            XCTAssertEqual([], exception.classes)
        }
        // Date, after
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0D, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F,
                0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x40, 0x00, 0x28,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual([], exception.forms)
            XCTAssertEqual(1, exception.documentProperties.count)
            XCTAssertEqual("Creation Time", exception.documentProperties[0].field)
            XCTAssertEqual(0x8228, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.time, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.after, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 14, hour: 08, minute: 58, second: 01)), exception.documentProperties[0].dateValue)
            XCTAssertEqual([], exception.classes)
        }
        // Multiple
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x3B, 0x00,
                0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x3B, 0x00, 0x20, 0x00, 0x54, 0x00,
                0x61, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x02, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65,
                0x00, 0x73, 0x00, 0x03, 0x00, 0x23, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xD2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x5B, 0xB0, 0x05, 0x2C, 0x83, 0xE5, 0x40,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72,
                0x00, 0x1F, 0x00, 0x22, 0x82, 0x00, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x75, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x0B, 0xB6, 0x60, 0x0B, 0x2C, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                0x1D, 0x49, 0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65,
                0x65, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x13, 0x49,
                0x50, 0x4D, 0x2E, 0x4E, 0x6F, 0x74, 0x65, 0x2E, 0x4D, 0x6F, 0x62, 0x69, 0x6C, 0x65, 0x2E, 0x53,
                0x4D, 0x53, 0x08, 0x49, 0x50, 0x4D, 0x2E, 0x54, 0x61, 0x73, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is WithSelectedPropertiesOfDocumentOrFormsRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! WithSelectedPropertiesOfDocumentOrFormsRuleElementData
            XCTAssertEqual(["Accept Meeting Response", " Text Message", " Task"], exception.forms)
            XCTAssertEqual(2, exception.documentProperties.count)
            XCTAssertEqual("Bytes", exception.documentProperties[0].field)
            XCTAssertEqual(0x8223, exception.documentProperties[0].id)
            XCTAssertEqual(PropertyType.integer32, exception.documentProperties[0].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[0].stringMatchType)
            XCTAssertEqual("", exception.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, exception.documentProperties[0].numberValue)
            XCTAssertEqual(0, exception.documentProperties[0].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[0].dateMatchType)
            XCTAssertEqual("Author", exception.documentProperties[1].field)
            XCTAssertEqual(0x8222, exception.documentProperties[1].id)
            XCTAssertEqual(PropertyType.string, exception.documentProperties[1].dataType)
            XCTAssertEqual(.contains, exception.documentProperties[1].stringMatchType)
            XCTAssertEqual("value", exception.documentProperties[1].stringValue)
            XCTAssertEqual(.equals, exception.documentProperties[1].numberMatchType)
            XCTAssertEqual(0, exception.documentProperties[1].numberValue)
            XCTAssertEqual(0, exception.documentProperties[1].boolValue)
            XCTAssertEqual(.before, exception.documentProperties[1].dateMatchType)
            XCTAssertEqual(["IPM.Schedule.Meeting.Resp.Pos", "IPM.Note.Mobile.SMS", "IPM.Task"], exception.classes)
        }
    }

    func testSenderInSpecifiedAddressBookException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x1D, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74,
                0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20,
                0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72,
                0x00, 0x20, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x29, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFB, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 0x43, 0x52, 0x75,
                0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x15, 0x02, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x6F, 0xB8, 0xC2, 0x2A, 0x54, 0xBF,
                0x46, 0x8C, 0x79, 0x45, 0xF3, 0x8A, 0x29, 0xFA, 0x22, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07,
                0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B, 0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x01, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1D, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00,
                0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x68, 0x00,
                0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x75, 0x00,
                0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x79, 0x00,
                0x29, 0x00, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x69, 0xC0, 0x06, 0x38, 0x4C, 0x63, 0x62, 0x47, 0xAE, 0xD8, 0xC2, 0x3C, 0xAE, 0xA4, 0xC6, 0x26,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00

            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.onThisComputerOnlyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].data is OnThisComputerOnlyRuleElementData)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.senderInSpecifiedAddressBookException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SenderInSpecifiedAddressBookRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! SenderInSpecifiedAddressBookRuleElementData
            XCTAssertEqual("Contacts (This computer only)", exception.name)
        }
    }

    func testWhichIsMeetingInvitationOrUpdateException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x16, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(.whichIsAMeetingInvitationOrInviteException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
        }
    }

    func testFromRSSFeedsWithSpecifiedTextInTitleException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x19, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A,
                0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x2D, 0x00, 0x4F, 0x00,
                0x72, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00,
                0x72, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.fromRSSFeedsWithSpecifiedTextInTitleException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["ISS On-Orbit Status Report"], exception.entries)
        }
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x19, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A,
                0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x2D, 0x00, 0x4F, 0x00,
                0x72, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00,
                0x72, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x4E, 0x00, 0x41, 0x00, 0x53, 0x00, 0x41,
                0x00, 0x20, 0x00, 0x42, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E,
                0x00, 0x67, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x77, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.fromRSSFeedsWithSpecifiedTextInTitleException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is StringsListRuleElementData)
            
            let exception = file.rules[0].exceptions[0].data as! StringsListRuleElementData
            XCTAssertEqual(["ISS On-Orbit Status Report", "NASA Breaking News"], exception.entries)
        }
    }

    func testFromAnyRSSFeedException() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x1B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(1, file.rules[0].exceptions.count)
            XCTAssertEqual(.fromAnyRSSFeedException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
        }
    }

    func testMultipleExceptions() throws {
        do {
            let file = try OutlookRulesFile(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xF5, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F,
                0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C,
                0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33,
                0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(0, file.rules[0].conditions.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(2, file.rules[0].exceptions.count)
            XCTAssertEqual(.nameInToBoxException, file.rules[0].exceptions[0].identifier)
            XCTAssertTrue(file.rules[0].exceptions[0].data is SimpleRuleElementData)
            XCTAssertEqual(.sentOnlyToMeException, file.rules[0].exceptions[1].identifier)
            XCTAssertTrue(file.rules[0].exceptions[1].data is SimpleRuleElementData)
        }
    }

    static var allTests = [
        ("testFromException", testFromException),
        ("testSpecificWordsInSubjectException", testSpecificWordsInSubjectException),
        ("testThroughAccountException", testThroughAccountException),
        ("testSentOnlyToMeException", testSentOnlyToMeException),
        ("testNameInToBoxException", testNameInToBoxException),
        ("testImportanceException", testImportanceException),
        ("testsensitivityCondition", testsensitivityCondition),
        ("testFlaggedForActionException", testFlaggedForActionException),
        ("testNameInCcBoxException", testNameInCcBoxException),
        ("testNameInToOrCcBoxException", testNameInToOrCcBoxException),
        ("testNameNotInToBoxException", testNameNotInToBoxException),
        ("testToException", testToException),
        ("testSpecificWordsInBodyException", testSpecificWordsInBodyException),
        ("testSpecificWordsInSubjectOrBodyException", testSpecificWordsInSubjectOrBodyException),
        ("testSpecificWordsInMessageHeaderException", testSpecificWordsInMessageHeaderException),
        ("testSpecificWordsInSendersAddressException", testSpecificWordsInSendersAddressException),
        ("testSpecificWordsInRecipientsAddressException", testSpecificWordsInRecipientsAddressException),
        ("testAssignedToCategoryException", testAssignedToCategoryException),
        ("testWhichIsAnAutomaticReplyException", testWhichIsAnAutomaticReplyException),
        ("testHasAttachmentException", testHasAttachmentException),
        ("testSizeInSpecificRangeException", testSizeInSpecificRangeException),
        ("testReceivedInSpecificDateSpanException", testReceivedInSpecificDateSpanException),
        ("testUsesFormException", testUsesFormException),
        ("testWithSelectedPropertiesOfDocumentOrFormsException", testWithSelectedPropertiesOfDocumentOrFormsException),
        ("testSenderInSpecifiedAddressBookException", testSenderInSpecifiedAddressBookException),
        ("testWhichIsMeetingInvitationOrUpdateException", testWhichIsMeetingInvitationOrUpdateException),
        ("testFromRSSFeedsWithSpecifiedTextInTitleException", testFromRSSFeedsWithSpecifiedTextInTitleException),
        ("testFromAnyRSSFeedException", testFromAnyRSSFeedException),
        ("testMultipleExceptions", testMultipleExceptions),
    ]
}
